import itertools

def tsp_brute_force(graph, start):
    all_cities = list(graph.keys())
    all_permutations = itertools.permutations(all_cities)
    
    min_cost = float('inf')
    best_path = None
    
    for path in all_permutations:
        if path[0] == start:
            total_cost = 0
            for i in range(len(path) - 1):
                if path[i+1] in graph[path[i]]:
                    total_cost += graph[path[i]][path[i+1]]
                else:
                    break
            else:
                if total_cost < min_cost:
                    min_cost = total_cost
                    best_path = path
    
    return best_path, min_cost

graph = {
    'A': {'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30}
}

start_city = 'A'
best_path, min_cost = tsp_brute_force(graph, start_city)

print("Shortest path:", best_path)
print("Minimum cost:", min_cost)
